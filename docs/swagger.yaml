definitions:
  domain.Customer:
    properties:
      id:
        type: string
    type: object
  domain.Delivery:
    properties:
      customer:
        $ref: '#/definitions/domain.Customer'
      destination:
        $ref: '#/definitions/domain.TimeAndPlace'
      id:
        type: string
      parcel:
        $ref: '#/definitions/domain.Parcel'
      pickup:
        $ref: '#/definitions/domain.TimeAndPlace'
      rider:
        $ref: '#/definitions/domain.Rider'
      status:
        type: integer
    type: object
  domain.Dimensions:
    properties:
      depth:
        type: integer
      height:
        type: integer
      width:
        type: integer
    type: object
  domain.Location:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  domain.Parcel:
    properties:
      id:
        type: string
      serviceArea:
        type: integer
      size:
        $ref: '#/definitions/domain.Dimensions'
      weight:
        type: integer
    type: object
  domain.Rider:
    properties:
      id:
        type: string
      serviceArea:
        type: integer
    type: object
  domain.TimeAndPlace:
    properties:
      address:
        type: string
      coordinates:
        $ref: '#/definitions/domain.Location'
      time:
        type: string
    type: object
  dto.BodyAssignRider:
    properties:
      riderId:
        type: string
    type: object
  dto.BodyCreateDelivery:
    properties:
      destination:
        $ref: '#/definitions/dto.BodyCreateDeliveryDestination'
      ownerId:
        type: string
      parcelId:
        type: string
      pickup:
        $ref: '#/definitions/dto.BodyCreateDeliveryPickup'
    type: object
  dto.BodyCreateDeliveryDestination:
    properties:
      address:
        type: string
      coordinates:
        $ref: '#/definitions/domain.Location'
    type: object
  dto.BodyCreateDeliveryPickup:
    properties:
      address:
        type: string
      coordinates:
        $ref: '#/definitions/domain.Location'
      time:
        type: integer
    type: object
  dto.ResponseAssignRider:
    properties:
      customer:
        $ref: '#/definitions/domain.Customer'
      destination:
        $ref: '#/definitions/domain.TimeAndPlace'
      id:
        type: string
      parcel:
        $ref: '#/definitions/domain.Parcel'
      pickup:
        $ref: '#/definitions/domain.TimeAndPlace'
      rider:
        $ref: '#/definitions/domain.Rider'
      status:
        type: integer
    type: object
  dto.ResponseCreateDelivery:
    properties:
      destination:
        $ref: '#/definitions/domain.TimeAndPlace'
      owner:
        $ref: '#/definitions/domain.Customer'
      parcel:
        $ref: '#/definitions/domain.Parcel'
      pickup:
        $ref: '#/definitions/domain.TimeAndPlace'
    type: object
info:
  contact: {}
paths:
  /api/deliveries:
    get:
      consumes:
      - application/json
      description: gets all deliveries in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Delivery'
            type: array
      summary: get all deliveries
    post:
      consumes:
      - application/json
      description: creates a new delivery
      parameters:
      - description: Add delivery
        in: body
        name: rider
        required: true
        schema:
          $ref: '#/definitions/dto.BodyCreateDelivery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseCreateDelivery'
      summary: create delivery
  /api/deliveries/{id}:
    get:
      description: gets a delivery from the system by its ID
      parameters:
      - description: Delivery id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Delivery'
      summary: get delivery
  /api/deliveries/{id}/complete:
    get:
      description: completes a delivery
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Delivery'
      summary: complete delivery
  /api/deliveries/{id}/rider:
    post:
      consumes:
      - application/json
      description: assigns a rider to a delivery
      parameters:
      - description: Assign rider
        in: body
        name: delivery
        required: true
        schema:
          $ref: '#/definitions/dto.BodyAssignRider'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseAssignRider'
      summary: assign rider
  /api/deliveries/{id}/start:
    get:
      description: starts a delivery
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Delivery'
      summary: start delivery
  /api/deliveries/radius/{latlon}:
    get:
      description: gets a delivery from the system based on the distance to the given
        point
      parameters:
      - description: Latitude,Longitude
        in: path
        name: latlon
        required: true
        type: string
      - description: radius of search in meters (default = 1000)
        in: query
        name: radius
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Delivery'
      summary: get delivery by distance
swagger: "2.0"
